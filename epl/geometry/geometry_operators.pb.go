// Code generated by protoc-gen-go. DO NOT EDIT.
// source: geometry_operators.proto

/*
Package geometry is a generated protocol buffer package.

It is generated from these files:
	geometry_operators.proto

It has these top-level messages:
	GeometryBagData
	SpatialReferenceData
	OperatorResult
	BufferParams
	GeodeticBufferParams
	ConvexParams
	RelateParams
	RandomPointsParams
	GeneralizeParams
	GeneralizeByAreaParams
	IntersectionParams
	OffsetParams
	CutParams
	ClipParams
	DensifyParams
	SimplifyParams
	OperatorRequest
	EnvelopeData
*/
package geometry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// Type of geometry encoding
type GeometryEncodingType int32

const (
	GeometryEncodingType_unknown GeometryEncodingType = 0
	GeometryEncodingType_wkb     GeometryEncodingType = 1
	GeometryEncodingType_wkt     GeometryEncodingType = 2
	GeometryEncodingType_geojson GeometryEncodingType = 3
	// TODO review esri encoding typename (this is for the esri shape binary format)
	GeometryEncodingType_esrishape GeometryEncodingType = 4
)

var GeometryEncodingType_name = map[int32]string{
	0: "unknown",
	1: "wkb",
	2: "wkt",
	3: "geojson",
	4: "esrishape",
}
var GeometryEncodingType_value = map[string]int32{
	"unknown":   0,
	"wkb":       1,
	"wkt":       2,
	"geojson":   3,
	"esrishape": 4,
}

func (x GeometryEncodingType) String() string {
	return proto.EnumName(GeometryEncodingType_name, int32(x))
}
func (GeometryEncodingType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServiceOperatorType int32

const (
	ServiceOperatorType_Project                   ServiceOperatorType = 0
	ServiceOperatorType_ExportToJson              ServiceOperatorType = 1
	ServiceOperatorType_ImportFromJson            ServiceOperatorType = 2
	ServiceOperatorType_ImportMapGeometryFromJson ServiceOperatorType = 3
	ServiceOperatorType_ExportToESRIShape         ServiceOperatorType = 4
	ServiceOperatorType_ImportFromESRIShape       ServiceOperatorType = 5
	ServiceOperatorType_Union                     ServiceOperatorType = 6
	ServiceOperatorType_Difference                ServiceOperatorType = 7
	ServiceOperatorType_Proximity2D               ServiceOperatorType = 8
	ServiceOperatorType_Relate                    ServiceOperatorType = 9
	ServiceOperatorType_Equals                    ServiceOperatorType = 10
	ServiceOperatorType_Disjoint                  ServiceOperatorType = 11
	ServiceOperatorType_Intersects                ServiceOperatorType = 12
	ServiceOperatorType_Within                    ServiceOperatorType = 13
	ServiceOperatorType_Contains                  ServiceOperatorType = 14
	ServiceOperatorType_Crosses                   ServiceOperatorType = 15
	ServiceOperatorType_Touches                   ServiceOperatorType = 16
	ServiceOperatorType_Overlaps                  ServiceOperatorType = 17
	ServiceOperatorType_Buffer                    ServiceOperatorType = 18
	ServiceOperatorType_Distance                  ServiceOperatorType = 19
	ServiceOperatorType_Intersection              ServiceOperatorType = 20
	ServiceOperatorType_Clip                      ServiceOperatorType = 21
	ServiceOperatorType_Cut                       ServiceOperatorType = 22
	ServiceOperatorType_DensifyByLength           ServiceOperatorType = 23
	ServiceOperatorType_GeodesicBuffer            ServiceOperatorType = 26
	ServiceOperatorType_GeodeticDensifyByLength   ServiceOperatorType = 27
	//    ShapePreservingDensify = 28;
	ServiceOperatorType_GeodeticLength      ServiceOperatorType = 29
	ServiceOperatorType_Simplify            ServiceOperatorType = 31
	ServiceOperatorType_SimplifyOGC         ServiceOperatorType = 32
	ServiceOperatorType_Offset              ServiceOperatorType = 33
	ServiceOperatorType_Generalize          ServiceOperatorType = 34
	ServiceOperatorType_GeneralizeByArea    ServiceOperatorType = 35
	ServiceOperatorType_ExportToWkb         ServiceOperatorType = 36
	ServiceOperatorType_ImportFromWkb       ServiceOperatorType = 37
	ServiceOperatorType_ExportToWkt         ServiceOperatorType = 38
	ServiceOperatorType_ImportFromWkt       ServiceOperatorType = 39
	ServiceOperatorType_ImportFromGeoJson   ServiceOperatorType = 40
	ServiceOperatorType_ExportToGeoJson     ServiceOperatorType = 41
	ServiceOperatorType_SymmetricDifference ServiceOperatorType = 42
	ServiceOperatorType_ConvexHull          ServiceOperatorType = 43
	ServiceOperatorType_Boundary            ServiceOperatorType = 44
	ServiceOperatorType_RandomPoints        ServiceOperatorType = 45
	ServiceOperatorType_EnclosingCircle     ServiceOperatorType = 46
)

var ServiceOperatorType_name = map[int32]string{
	0:  "Project",
	1:  "ExportToJson",
	2:  "ImportFromJson",
	3:  "ImportMapGeometryFromJson",
	4:  "ExportToESRIShape",
	5:  "ImportFromESRIShape",
	6:  "Union",
	7:  "Difference",
	8:  "Proximity2D",
	9:  "Relate",
	10: "Equals",
	11: "Disjoint",
	12: "Intersects",
	13: "Within",
	14: "Contains",
	15: "Crosses",
	16: "Touches",
	17: "Overlaps",
	18: "Buffer",
	19: "Distance",
	20: "Intersection",
	21: "Clip",
	22: "Cut",
	23: "DensifyByLength",
	26: "GeodesicBuffer",
	27: "GeodeticDensifyByLength",
	29: "GeodeticLength",
	31: "Simplify",
	32: "SimplifyOGC",
	33: "Offset",
	34: "Generalize",
	35: "GeneralizeByArea",
	36: "ExportToWkb",
	37: "ImportFromWkb",
	38: "ExportToWkt",
	39: "ImportFromWkt",
	40: "ImportFromGeoJson",
	41: "ExportToGeoJson",
	42: "SymmetricDifference",
	43: "ConvexHull",
	44: "Boundary",
	45: "RandomPoints",
	46: "EnclosingCircle",
}
var ServiceOperatorType_value = map[string]int32{
	"Project":                   0,
	"ExportToJson":              1,
	"ImportFromJson":            2,
	"ImportMapGeometryFromJson": 3,
	"ExportToESRIShape":         4,
	"ImportFromESRIShape":       5,
	"Union":                     6,
	"Difference":                7,
	"Proximity2D":               8,
	"Relate":                    9,
	"Equals":                    10,
	"Disjoint":                  11,
	"Intersects":                12,
	"Within":                    13,
	"Contains":                  14,
	"Crosses":                   15,
	"Touches":                   16,
	"Overlaps":                  17,
	"Buffer":                    18,
	"Distance":                  19,
	"Intersection":              20,
	"Clip":                      21,
	"Cut":                       22,
	"DensifyByLength":           23,
	"GeodesicBuffer":            26,
	"GeodeticDensifyByLength":   27,
	"GeodeticLength":            29,
	"Simplify":                  31,
	"SimplifyOGC":               32,
	"Offset":                    33,
	"Generalize":                34,
	"GeneralizeByArea":          35,
	"ExportToWkb":               36,
	"ImportFromWkb":             37,
	"ExportToWkt":               38,
	"ImportFromWkt":             39,
	"ImportFromGeoJson":         40,
	"ExportToGeoJson":           41,
	"SymmetricDifference":       42,
	"ConvexHull":                43,
	"Boundary":                  44,
	"RandomPoints":              45,
	"EnclosingCircle":           46,
}

func (x ServiceOperatorType) String() string {
	return proto.EnumName(ServiceOperatorType_name, int32(x))
}
func (ServiceOperatorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type OffsetJoinType int32

const (
	OffsetJoinType_Round  OffsetJoinType = 0
	OffsetJoinType_Bevel  OffsetJoinType = 1
	OffsetJoinType_Miter  OffsetJoinType = 2
	OffsetJoinType_Square OffsetJoinType = 3
)

var OffsetJoinType_name = map[int32]string{
	0: "Round",
	1: "Bevel",
	2: "Miter",
	3: "Square",
}
var OffsetJoinType_value = map[string]int32{
	"Round":  0,
	"Bevel":  1,
	"Miter":  2,
	"Square": 3,
}

func (x OffsetJoinType) String() string {
	return proto.EnumName(OffsetJoinType_name, int32(x))
}
func (OffsetJoinType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// message ServiceGeometryBag {
type GeometryBagData struct {
	// id is usually associated with position in file format or database
	//    repeated int64 geometry_ids = 1;
	GeometryIds []int64 `protobuf:"varint,1,rep,packed,name=geometry_ids,json=geometryIds" json:"geometry_ids,omitempty"`
	// type can be 'wkt', 'wkb', 'geojson', or 'esri'
	GeometryEncodingType GeometryEncodingType  `protobuf:"varint,2,opt,name=geometry_encoding_type,json=geometryEncodingType,enum=geometry.GeometryEncodingType" json:"geometry_encoding_type,omitempty"`
	GeometryStrings      []string              `protobuf:"bytes,3,rep,name=geometry_strings,json=geometryStrings" json:"geometry_strings,omitempty"`
	GeometryBinaries     [][]byte              `protobuf:"bytes,4,rep,name=geometry_binaries,json=geometryBinaries,proto3" json:"geometry_binaries,omitempty"`
	SpatialReference     *SpatialReferenceData `protobuf:"bytes,5,opt,name=spatial_reference,json=spatialReference" json:"spatial_reference,omitempty"`
}

func (m *GeometryBagData) Reset()                    { *m = GeometryBagData{} }
func (m *GeometryBagData) String() string            { return proto.CompactTextString(m) }
func (*GeometryBagData) ProtoMessage()               {}
func (*GeometryBagData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GeometryBagData) GetGeometryIds() []int64 {
	if m != nil {
		return m.GeometryIds
	}
	return nil
}

func (m *GeometryBagData) GetGeometryEncodingType() GeometryEncodingType {
	if m != nil {
		return m.GeometryEncodingType
	}
	return GeometryEncodingType_unknown
}

func (m *GeometryBagData) GetGeometryStrings() []string {
	if m != nil {
		return m.GeometryStrings
	}
	return nil
}

func (m *GeometryBagData) GetGeometryBinaries() [][]byte {
	if m != nil {
		return m.GeometryBinaries
	}
	return nil
}

func (m *GeometryBagData) GetSpatialReference() *SpatialReferenceData {
	if m != nil {
		return m.SpatialReference
	}
	return nil
}

type SpatialReferenceData struct {
	Proj4 string `protobuf:"bytes,4,opt,name=proj4" json:"proj4,omitempty"`
	// String that is a wkt, wkid, esri_wkt, or a proj4 string
	EsriWkt string `protobuf:"bytes,5,opt,name=esri_wkt,json=esriWkt" json:"esri_wkt,omitempty"`
	// type is either 'wkid', 'esri_wkt'
	Wkid int32 `protobuf:"varint,6,opt,name=wkid" json:"wkid,omitempty"`
}

func (m *SpatialReferenceData) Reset()                    { *m = SpatialReferenceData{} }
func (m *SpatialReferenceData) String() string            { return proto.CompactTextString(m) }
func (*SpatialReferenceData) ProtoMessage()               {}
func (*SpatialReferenceData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SpatialReferenceData) GetProj4() string {
	if m != nil {
		return m.Proj4
	}
	return ""
}

func (m *SpatialReferenceData) GetEsriWkt() string {
	if m != nil {
		return m.EsriWkt
	}
	return ""
}

func (m *SpatialReferenceData) GetWkid() int32 {
	if m != nil {
		return m.Wkid
	}
	return 0
}

type OperatorResult struct {
	GeometryBag         *GeometryBagData `protobuf:"bytes,1,opt,name=geometry_bag,json=geometryBag" json:"geometry_bag,omitempty"`
	SpatialRelationship bool             `protobuf:"varint,2,opt,name=spatial_relationship,json=spatialRelationship" json:"spatial_relationship,omitempty"`
	Distance            float64          `protobuf:"fixed64,3,opt,name=distance" json:"distance,omitempty"`
	RelateMap           map[int32]bool   `protobuf:"bytes,4,rep,name=relate_map,json=relateMap" json:"relate_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *OperatorResult) Reset()                    { *m = OperatorResult{} }
func (m *OperatorResult) String() string            { return proto.CompactTextString(m) }
func (*OperatorResult) ProtoMessage()               {}
func (*OperatorResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OperatorResult) GetGeometryBag() *GeometryBagData {
	if m != nil {
		return m.GeometryBag
	}
	return nil
}

func (m *OperatorResult) GetSpatialRelationship() bool {
	if m != nil {
		return m.SpatialRelationship
	}
	return false
}

func (m *OperatorResult) GetDistance() float64 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *OperatorResult) GetRelateMap() map[int32]bool {
	if m != nil {
		return m.RelateMap
	}
	return nil
}

type BufferParams struct {
	Distances               []float64 `protobuf:"fixed64,1,rep,packed,name=distances" json:"distances,omitempty"`
	MaxDeviations           []float64 `protobuf:"fixed64,2,rep,packed,name=max_deviations,json=maxDeviations" json:"max_deviations,omitempty"`
	UnionResult             bool      `protobuf:"varint,3,opt,name=union_result,json=unionResult" json:"union_result,omitempty"`
	MaxVerticesInFullCircle int32     `protobuf:"varint,4,opt,name=max_vertices_in_full_circle,json=maxVerticesInFullCircle" json:"max_vertices_in_full_circle,omitempty"`
}

func (m *BufferParams) Reset()                    { *m = BufferParams{} }
func (m *BufferParams) String() string            { return proto.CompactTextString(m) }
func (*BufferParams) ProtoMessage()               {}
func (*BufferParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BufferParams) GetDistances() []float64 {
	if m != nil {
		return m.Distances
	}
	return nil
}

func (m *BufferParams) GetMaxDeviations() []float64 {
	if m != nil {
		return m.MaxDeviations
	}
	return nil
}

func (m *BufferParams) GetUnionResult() bool {
	if m != nil {
		return m.UnionResult
	}
	return false
}

func (m *BufferParams) GetMaxVerticesInFullCircle() int32 {
	if m != nil {
		return m.MaxVerticesInFullCircle
	}
	return 0
}

type GeodeticBufferParams struct {
	Distances               []float64 `protobuf:"fixed64,1,rep,packed,name=distances" json:"distances,omitempty"`
	MaxDeviations           []float64 `protobuf:"fixed64,2,rep,packed,name=max_deviations,json=maxDeviations" json:"max_deviations,omitempty"`
	UnionResult             bool      `protobuf:"varint,3,opt,name=union_result,json=unionResult" json:"union_result,omitempty"`
	MaxVerticesInFullCircle int32     `protobuf:"varint,4,opt,name=max_vertices_in_full_circle,json=maxVerticesInFullCircle" json:"max_vertices_in_full_circle,omitempty"`
}

func (m *GeodeticBufferParams) Reset()                    { *m = GeodeticBufferParams{} }
func (m *GeodeticBufferParams) String() string            { return proto.CompactTextString(m) }
func (*GeodeticBufferParams) ProtoMessage()               {}
func (*GeodeticBufferParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GeodeticBufferParams) GetDistances() []float64 {
	if m != nil {
		return m.Distances
	}
	return nil
}

func (m *GeodeticBufferParams) GetMaxDeviations() []float64 {
	if m != nil {
		return m.MaxDeviations
	}
	return nil
}

func (m *GeodeticBufferParams) GetUnionResult() bool {
	if m != nil {
		return m.UnionResult
	}
	return false
}

func (m *GeodeticBufferParams) GetMaxVerticesInFullCircle() int32 {
	if m != nil {
		return m.MaxVerticesInFullCircle
	}
	return 0
}

type ConvexParams struct {
	Merge bool `protobuf:"varint,1,opt,name=merge" json:"merge,omitempty"`
}

func (m *ConvexParams) Reset()                    { *m = ConvexParams{} }
func (m *ConvexParams) String() string            { return proto.CompactTextString(m) }
func (*ConvexParams) ProtoMessage()               {}
func (*ConvexParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConvexParams) GetMerge() bool {
	if m != nil {
		return m.Merge
	}
	return false
}

type RelateParams struct {
	De_9Im string `protobuf:"bytes,1,opt,name=de_9im,json=de9im" json:"de_9im,omitempty"`
}

func (m *RelateParams) Reset()                    { *m = RelateParams{} }
func (m *RelateParams) String() string            { return proto.CompactTextString(m) }
func (*RelateParams) ProtoMessage()               {}
func (*RelateParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RelateParams) GetDe_9Im() string {
	if m != nil {
		return m.De_9Im
	}
	return ""
}

type RandomPointsParams struct {
	PointsPerSquareKm []float64 `protobuf:"fixed64,1,rep,packed,name=points_per_square_km,json=pointsPerSquareKm" json:"points_per_square_km,omitempty"`
	Seed              int64     `protobuf:"varint,2,opt,name=seed" json:"seed,omitempty"`
}

func (m *RandomPointsParams) Reset()                    { *m = RandomPointsParams{} }
func (m *RandomPointsParams) String() string            { return proto.CompactTextString(m) }
func (*RandomPointsParams) ProtoMessage()               {}
func (*RandomPointsParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RandomPointsParams) GetPointsPerSquareKm() []float64 {
	if m != nil {
		return m.PointsPerSquareKm
	}
	return nil
}

func (m *RandomPointsParams) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

type GeneralizeParams struct {
	MaxDeviation      float64 `protobuf:"fixed64,1,opt,name=max_deviation,json=maxDeviation" json:"max_deviation,omitempty"`
	RemoveDegenerates bool    `protobuf:"varint,2,opt,name=remove_degenerates,json=removeDegenerates" json:"remove_degenerates,omitempty"`
}

func (m *GeneralizeParams) Reset()                    { *m = GeneralizeParams{} }
func (m *GeneralizeParams) String() string            { return proto.CompactTextString(m) }
func (*GeneralizeParams) ProtoMessage()               {}
func (*GeneralizeParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GeneralizeParams) GetMaxDeviation() float64 {
	if m != nil {
		return m.MaxDeviation
	}
	return 0
}

func (m *GeneralizeParams) GetRemoveDegenerates() bool {
	if m != nil {
		return m.RemoveDegenerates
	}
	return false
}

type GeneralizeByAreaParams struct {
	MaxDeviation      float64 `protobuf:"fixed64,1,opt,name=max_deviation,json=maxDeviation" json:"max_deviation,omitempty"`
	RemoveDegenerates bool    `protobuf:"varint,2,opt,name=remove_degenerates,json=removeDegenerates" json:"remove_degenerates,omitempty"`
}

func (m *GeneralizeByAreaParams) Reset()                    { *m = GeneralizeByAreaParams{} }
func (m *GeneralizeByAreaParams) String() string            { return proto.CompactTextString(m) }
func (*GeneralizeByAreaParams) ProtoMessage()               {}
func (*GeneralizeByAreaParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GeneralizeByAreaParams) GetMaxDeviation() float64 {
	if m != nil {
		return m.MaxDeviation
	}
	return 0
}

func (m *GeneralizeByAreaParams) GetRemoveDegenerates() bool {
	if m != nil {
		return m.RemoveDegenerates
	}
	return false
}

type IntersectionParams struct {
	DimensionMask int32 `protobuf:"varint,1,opt,name=dimension_mask,json=dimensionMask" json:"dimension_mask,omitempty"`
}

func (m *IntersectionParams) Reset()                    { *m = IntersectionParams{} }
func (m *IntersectionParams) String() string            { return proto.CompactTextString(m) }
func (*IntersectionParams) ProtoMessage()               {}
func (*IntersectionParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *IntersectionParams) GetDimensionMask() int32 {
	if m != nil {
		return m.DimensionMask
	}
	return 0
}

type OffsetParams struct {
	Distance     float64        `protobuf:"fixed64,1,opt,name=distance" json:"distance,omitempty"`
	JoinType     OffsetJoinType `protobuf:"varint,2,opt,name=join_type,json=joinType,enum=geometry.OffsetJoinType" json:"join_type,omitempty"`
	BevelRatio   float64        `protobuf:"fixed64,3,opt,name=bevel_ratio,json=bevelRatio" json:"bevel_ratio,omitempty"`
	FlattenError float64        `protobuf:"fixed64,4,opt,name=flatten_error,json=flattenError" json:"flatten_error,omitempty"`
}

func (m *OffsetParams) Reset()                    { *m = OffsetParams{} }
func (m *OffsetParams) String() string            { return proto.CompactTextString(m) }
func (*OffsetParams) ProtoMessage()               {}
func (*OffsetParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *OffsetParams) GetDistance() float64 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *OffsetParams) GetJoinType() OffsetJoinType {
	if m != nil {
		return m.JoinType
	}
	return OffsetJoinType_Round
}

func (m *OffsetParams) GetBevelRatio() float64 {
	if m != nil {
		return m.BevelRatio
	}
	return 0
}

func (m *OffsetParams) GetFlattenError() float64 {
	if m != nil {
		return m.FlattenError
	}
	return 0
}

type CutParams struct {
	ConsiderTouch bool `protobuf:"varint,1,opt,name=consider_touch,json=considerTouch" json:"consider_touch,omitempty"`
}

func (m *CutParams) Reset()                    { *m = CutParams{} }
func (m *CutParams) String() string            { return proto.CompactTextString(m) }
func (*CutParams) ProtoMessage()               {}
func (*CutParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CutParams) GetConsiderTouch() bool {
	if m != nil {
		return m.ConsiderTouch
	}
	return false
}

type ClipParams struct {
	Envelope *EnvelopeData `protobuf:"bytes,1,opt,name=envelope" json:"envelope,omitempty"`
}

func (m *ClipParams) Reset()                    { *m = ClipParams{} }
func (m *ClipParams) String() string            { return proto.CompactTextString(m) }
func (*ClipParams) ProtoMessage()               {}
func (*ClipParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ClipParams) GetEnvelope() *EnvelopeData {
	if m != nil {
		return m.Envelope
	}
	return nil
}

type DensifyParams struct {
	MaxLength float64 `protobuf:"fixed64,1,opt,name=max_length,json=maxLength" json:"max_length,omitempty"`
}

func (m *DensifyParams) Reset()                    { *m = DensifyParams{} }
func (m *DensifyParams) String() string            { return proto.CompactTextString(m) }
func (*DensifyParams) ProtoMessage()               {}
func (*DensifyParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DensifyParams) GetMaxLength() float64 {
	if m != nil {
		return m.MaxLength
	}
	return 0
}

type SimplifyParams struct {
	Force bool `protobuf:"varint,1,opt,name=force" json:"force,omitempty"`
}

func (m *SimplifyParams) Reset()                    { *m = SimplifyParams{} }
func (m *SimplifyParams) String() string            { return proto.CompactTextString(m) }
func (*SimplifyParams) ProtoMessage()               {}
func (*SimplifyParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SimplifyParams) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type OperatorRequest struct {
	//    oneof primary_geoms {
	GeometryBag       *GeometryBagData `protobuf:"bytes,1,opt,name=geometry_bag,json=geometryBag" json:"geometry_bag,omitempty"`
	NestedRequest     *OperatorRequest `protobuf:"bytes,2,opt,name=nested_request,json=nestedRequest" json:"nested_request,omitempty"`
	LeftGeometryBag   *GeometryBagData `protobuf:"bytes,3,opt,name=left_geometry_bag,json=leftGeometryBag" json:"left_geometry_bag,omitempty"`
	LeftNestedRequest *OperatorRequest `protobuf:"bytes,4,opt,name=left_nested_request,json=leftNestedRequest" json:"left_nested_request,omitempty"`
	//    oneof secondary_geoms {
	RightGeometryBag          *GeometryBagData      `protobuf:"bytes,5,opt,name=right_geometry_bag,json=rightGeometryBag" json:"right_geometry_bag,omitempty"`
	RightNestedRequest        *OperatorRequest      `protobuf:"bytes,6,opt,name=right_nested_request,json=rightNestedRequest" json:"right_nested_request,omitempty"`
	OperatorType              ServiceOperatorType   `protobuf:"varint,7,opt,name=operator_type,json=operatorType,enum=geometry.ServiceOperatorType" json:"operator_type,omitempty"`
	ResultsEncodingType       GeometryEncodingType  `protobuf:"varint,8,opt,name=results_encoding_type,json=resultsEncodingType,enum=geometry.GeometryEncodingType" json:"results_encoding_type,omitempty"`
	OperationSpatialReference *SpatialReferenceData `protobuf:"bytes,9,opt,name=operation_spatial_reference,json=operationSpatialReference" json:"operation_spatial_reference,omitempty"`
	ResultSpatialReference    *SpatialReferenceData `protobuf:"bytes,10,opt,name=result_spatial_reference,json=resultSpatialReference" json:"result_spatial_reference,omitempty"`
	//    oneof params {
	BufferParams       *BufferParams       `protobuf:"bytes,11,opt,name=buffer_params,json=bufferParams" json:"buffer_params,omitempty"`
	ConvexParams       *ConvexParams       `protobuf:"bytes,12,opt,name=convex_params,json=convexParams" json:"convex_params,omitempty"`
	RelateParams       *RelateParams       `protobuf:"bytes,13,opt,name=relate_params,json=relateParams" json:"relate_params,omitempty"`
	RandomPointsParams *RandomPointsParams `protobuf:"bytes,14,opt,name=random_points_params,json=randomPointsParams" json:"random_points_params,omitempty"`
	GeneralizeParams   *GeneralizeParams   `protobuf:"bytes,15,opt,name=generalize_params,json=generalizeParams" json:"generalize_params,omitempty"`
	IntersectionParams *IntersectionParams `protobuf:"bytes,16,opt,name=intersection_params,json=intersectionParams" json:"intersection_params,omitempty"`
	OffsetParams       *OffsetParams       `protobuf:"bytes,17,opt,name=offset_params,json=offsetParams" json:"offset_params,omitempty"`
	CutParams          *CutParams          `protobuf:"bytes,18,opt,name=cut_params,json=cutParams" json:"cut_params,omitempty"`
	ClipParams         *ClipParams         `protobuf:"bytes,19,opt,name=clip_params,json=clipParams" json:"clip_params,omitempty"`
	DensifyParams      *DensifyParams      `protobuf:"bytes,20,opt,name=densify_params,json=densifyParams" json:"densify_params,omitempty"`
	SimplifyParams     *SimplifyParams     `protobuf:"bytes,21,opt,name=simplify_params,json=simplifyParams" json:"simplify_params,omitempty"`
}

func (m *OperatorRequest) Reset()                    { *m = OperatorRequest{} }
func (m *OperatorRequest) String() string            { return proto.CompactTextString(m) }
func (*OperatorRequest) ProtoMessage()               {}
func (*OperatorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *OperatorRequest) GetGeometryBag() *GeometryBagData {
	if m != nil {
		return m.GeometryBag
	}
	return nil
}

func (m *OperatorRequest) GetNestedRequest() *OperatorRequest {
	if m != nil {
		return m.NestedRequest
	}
	return nil
}

func (m *OperatorRequest) GetLeftGeometryBag() *GeometryBagData {
	if m != nil {
		return m.LeftGeometryBag
	}
	return nil
}

func (m *OperatorRequest) GetLeftNestedRequest() *OperatorRequest {
	if m != nil {
		return m.LeftNestedRequest
	}
	return nil
}

func (m *OperatorRequest) GetRightGeometryBag() *GeometryBagData {
	if m != nil {
		return m.RightGeometryBag
	}
	return nil
}

func (m *OperatorRequest) GetRightNestedRequest() *OperatorRequest {
	if m != nil {
		return m.RightNestedRequest
	}
	return nil
}

func (m *OperatorRequest) GetOperatorType() ServiceOperatorType {
	if m != nil {
		return m.OperatorType
	}
	return ServiceOperatorType_Project
}

func (m *OperatorRequest) GetResultsEncodingType() GeometryEncodingType {
	if m != nil {
		return m.ResultsEncodingType
	}
	return GeometryEncodingType_unknown
}

func (m *OperatorRequest) GetOperationSpatialReference() *SpatialReferenceData {
	if m != nil {
		return m.OperationSpatialReference
	}
	return nil
}

func (m *OperatorRequest) GetResultSpatialReference() *SpatialReferenceData {
	if m != nil {
		return m.ResultSpatialReference
	}
	return nil
}

func (m *OperatorRequest) GetBufferParams() *BufferParams {
	if m != nil {
		return m.BufferParams
	}
	return nil
}

func (m *OperatorRequest) GetConvexParams() *ConvexParams {
	if m != nil {
		return m.ConvexParams
	}
	return nil
}

func (m *OperatorRequest) GetRelateParams() *RelateParams {
	if m != nil {
		return m.RelateParams
	}
	return nil
}

func (m *OperatorRequest) GetRandomPointsParams() *RandomPointsParams {
	if m != nil {
		return m.RandomPointsParams
	}
	return nil
}

func (m *OperatorRequest) GetGeneralizeParams() *GeneralizeParams {
	if m != nil {
		return m.GeneralizeParams
	}
	return nil
}

func (m *OperatorRequest) GetIntersectionParams() *IntersectionParams {
	if m != nil {
		return m.IntersectionParams
	}
	return nil
}

func (m *OperatorRequest) GetOffsetParams() *OffsetParams {
	if m != nil {
		return m.OffsetParams
	}
	return nil
}

func (m *OperatorRequest) GetCutParams() *CutParams {
	if m != nil {
		return m.CutParams
	}
	return nil
}

func (m *OperatorRequest) GetClipParams() *ClipParams {
	if m != nil {
		return m.ClipParams
	}
	return nil
}

func (m *OperatorRequest) GetDensifyParams() *DensifyParams {
	if m != nil {
		return m.DensifyParams
	}
	return nil
}

func (m *OperatorRequest) GetSimplifyParams() *SimplifyParams {
	if m != nil {
		return m.SimplifyParams
	}
	return nil
}

type EnvelopeData struct {
	Xmin float64 `protobuf:"fixed64,1,opt,name=xmin" json:"xmin,omitempty"`
	Ymin float64 `protobuf:"fixed64,2,opt,name=ymin" json:"ymin,omitempty"`
	Xmax float64 `protobuf:"fixed64,3,opt,name=xmax" json:"xmax,omitempty"`
	Ymax float64 `protobuf:"fixed64,4,opt,name=ymax" json:"ymax,omitempty"`
}

func (m *EnvelopeData) Reset()                    { *m = EnvelopeData{} }
func (m *EnvelopeData) String() string            { return proto.CompactTextString(m) }
func (*EnvelopeData) ProtoMessage()               {}
func (*EnvelopeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *EnvelopeData) GetXmin() float64 {
	if m != nil {
		return m.Xmin
	}
	return 0
}

func (m *EnvelopeData) GetYmin() float64 {
	if m != nil {
		return m.Ymin
	}
	return 0
}

func (m *EnvelopeData) GetXmax() float64 {
	if m != nil {
		return m.Xmax
	}
	return 0
}

func (m *EnvelopeData) GetYmax() float64 {
	if m != nil {
		return m.Ymax
	}
	return 0
}

func init() {
	proto.RegisterType((*GeometryBagData)(nil), "geometry.GeometryBagData")
	proto.RegisterType((*SpatialReferenceData)(nil), "geometry.SpatialReferenceData")
	proto.RegisterType((*OperatorResult)(nil), "geometry.OperatorResult")
	proto.RegisterType((*BufferParams)(nil), "geometry.BufferParams")
	proto.RegisterType((*GeodeticBufferParams)(nil), "geometry.GeodeticBufferParams")
	proto.RegisterType((*ConvexParams)(nil), "geometry.ConvexParams")
	proto.RegisterType((*RelateParams)(nil), "geometry.RelateParams")
	proto.RegisterType((*RandomPointsParams)(nil), "geometry.RandomPointsParams")
	proto.RegisterType((*GeneralizeParams)(nil), "geometry.GeneralizeParams")
	proto.RegisterType((*GeneralizeByAreaParams)(nil), "geometry.GeneralizeByAreaParams")
	proto.RegisterType((*IntersectionParams)(nil), "geometry.IntersectionParams")
	proto.RegisterType((*OffsetParams)(nil), "geometry.OffsetParams")
	proto.RegisterType((*CutParams)(nil), "geometry.CutParams")
	proto.RegisterType((*ClipParams)(nil), "geometry.ClipParams")
	proto.RegisterType((*DensifyParams)(nil), "geometry.DensifyParams")
	proto.RegisterType((*SimplifyParams)(nil), "geometry.SimplifyParams")
	proto.RegisterType((*OperatorRequest)(nil), "geometry.OperatorRequest")
	proto.RegisterType((*EnvelopeData)(nil), "geometry.EnvelopeData")
	proto.RegisterEnum("geometry.GeometryEncodingType", GeometryEncodingType_name, GeometryEncodingType_value)
	proto.RegisterEnum("geometry.ServiceOperatorType", ServiceOperatorType_name, ServiceOperatorType_value)
	proto.RegisterEnum("geometry.OffsetJoinType", OffsetJoinType_name, OffsetJoinType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GeometryOperators service

type GeometryOperatorsClient interface {
	// Execute a single geometry operation
	ExecuteOperation(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorResult, error)
	StreamOperations(ctx context.Context, opts ...grpc.CallOption) (GeometryOperators_StreamOperationsClient, error)
	StreamOperationsEx(ctx context.Context, opts ...grpc.CallOption) (GeometryOperators_StreamOperationsExClient, error)
}

type geometryOperatorsClient struct {
	cc *grpc.ClientConn
}

func NewGeometryOperatorsClient(cc *grpc.ClientConn) GeometryOperatorsClient {
	return &geometryOperatorsClient{cc}
}

func (c *geometryOperatorsClient) ExecuteOperation(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorResult, error) {
	out := new(OperatorResult)
	err := grpc.Invoke(ctx, "/geometry.GeometryOperators/ExecuteOperation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geometryOperatorsClient) StreamOperations(ctx context.Context, opts ...grpc.CallOption) (GeometryOperators_StreamOperationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GeometryOperators_serviceDesc.Streams[0], c.cc, "/geometry.GeometryOperators/StreamOperations", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryOperatorsStreamOperationsClient{stream}
	return x, nil
}

type GeometryOperators_StreamOperationsClient interface {
	Send(*OperatorRequest) error
	Recv() (*OperatorResult, error)
	grpc.ClientStream
}

type geometryOperatorsStreamOperationsClient struct {
	grpc.ClientStream
}

func (x *geometryOperatorsStreamOperationsClient) Send(m *OperatorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryOperatorsStreamOperationsClient) Recv() (*OperatorResult, error) {
	m := new(OperatorResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryOperatorsClient) StreamOperationsEx(ctx context.Context, opts ...grpc.CallOption) (GeometryOperators_StreamOperationsExClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GeometryOperators_serviceDesc.Streams[1], c.cc, "/geometry.GeometryOperators/StreamOperationsEx", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryOperatorsStreamOperationsExClient{stream}
	return x, nil
}

type GeometryOperators_StreamOperationsExClient interface {
	Send(*OperatorRequest) error
	Recv() (*OperatorResult, error)
	grpc.ClientStream
}

type geometryOperatorsStreamOperationsExClient struct {
	grpc.ClientStream
}

func (x *geometryOperatorsStreamOperationsExClient) Send(m *OperatorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryOperatorsStreamOperationsExClient) Recv() (*OperatorResult, error) {
	m := new(OperatorResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GeometryOperators service

type GeometryOperatorsServer interface {
	// Execute a single geometry operation
	ExecuteOperation(context.Context, *OperatorRequest) (*OperatorResult, error)
	StreamOperations(GeometryOperators_StreamOperationsServer) error
	StreamOperationsEx(GeometryOperators_StreamOperationsExServer) error
}

func RegisterGeometryOperatorsServer(s *grpc.Server, srv GeometryOperatorsServer) {
	s.RegisterService(&_GeometryOperators_serviceDesc, srv)
}

func _GeometryOperators_ExecuteOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeometryOperatorsServer).ExecuteOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geometry.GeometryOperators/ExecuteOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeometryOperatorsServer).ExecuteOperation(ctx, req.(*OperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeometryOperators_StreamOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryOperatorsServer).StreamOperations(&geometryOperatorsStreamOperationsServer{stream})
}

type GeometryOperators_StreamOperationsServer interface {
	Send(*OperatorResult) error
	Recv() (*OperatorRequest, error)
	grpc.ServerStream
}

type geometryOperatorsStreamOperationsServer struct {
	grpc.ServerStream
}

func (x *geometryOperatorsStreamOperationsServer) Send(m *OperatorResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryOperatorsStreamOperationsServer) Recv() (*OperatorRequest, error) {
	m := new(OperatorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GeometryOperators_StreamOperationsEx_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryOperatorsServer).StreamOperationsEx(&geometryOperatorsStreamOperationsExServer{stream})
}

type GeometryOperators_StreamOperationsExServer interface {
	Send(*OperatorResult) error
	Recv() (*OperatorRequest, error)
	grpc.ServerStream
}

type geometryOperatorsStreamOperationsExServer struct {
	grpc.ServerStream
}

func (x *geometryOperatorsStreamOperationsExServer) Send(m *OperatorResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryOperatorsStreamOperationsExServer) Recv() (*OperatorRequest, error) {
	m := new(OperatorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GeometryOperators_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geometry.GeometryOperators",
	HandlerType: (*GeometryOperatorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteOperation",
			Handler:    _GeometryOperators_ExecuteOperation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOperations",
			Handler:       _GeometryOperators_StreamOperations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamOperationsEx",
			Handler:       _GeometryOperators_StreamOperationsEx_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "geometry_operators.proto",
}

func init() { proto.RegisterFile("geometry_operators.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1882 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x4f, 0x73, 0x23, 0x47,
	0x15, 0xdf, 0x91, 0x2c, 0x5b, 0x7a, 0xfa, 0xe3, 0x56, 0x4b, 0xb6, 0xb5, 0xde, 0x2c, 0x71, 0x94,
	0x6c, 0xa2, 0x6c, 0x88, 0x01, 0x43, 0xaa, 0x48, 0x1c, 0xa8, 0x44, 0xb6, 0x62, 0x9c, 0xc5, 0xb1,
	0x69, 0x1b, 0x16, 0x8a, 0xaa, 0x4c, 0x8d, 0x47, 0x2d, 0xb9, 0xad, 0x99, 0xe9, 0xd9, 0xee, 0x96,
	0x56, 0xe2, 0xe3, 0xc0, 0x81, 0x23, 0x17, 0x8e, 0x7c, 0x0d, 0x3e, 0x0b, 0x37, 0x8a, 0xea, 0x9e,
	0xbf, 0x92, 0x36, 0xb5, 0x5b, 0xa4, 0x38, 0x70, 0xeb, 0x7e, 0xfd, 0xde, 0xaf, 0x5f, 0xbf, 0xff,
	0x33, 0xd0, 0x19, 0x53, 0xee, 0x53, 0x25, 0x16, 0x36, 0x0f, 0xa9, 0x70, 0x14, 0x17, 0xf2, 0x30,
	0x14, 0x5c, 0x71, 0x5c, 0x4e, 0x4e, 0xba, 0x7f, 0x2b, 0xc0, 0xf6, 0x59, 0xbc, 0xe9, 0x3b, 0xe3,
	0x53, 0x47, 0x39, 0xf8, 0x1d, 0xa8, 0xa5, 0x92, 0x6c, 0x28, 0x3b, 0xd6, 0x41, 0xb1, 0x57, 0x24,
	0xd5, 0x84, 0x76, 0x3e, 0x94, 0xf8, 0x06, 0x76, 0x53, 0x16, 0x1a, 0xb8, 0x7c, 0xc8, 0x82, 0xb1,
	0xad, 0x16, 0x21, 0xed, 0x14, 0x0e, 0xac, 0x5e, 0xe3, 0xe8, 0x07, 0x87, 0xc9, 0xf1, 0x61, 0x82,
	0x3e, 0x88, 0xd9, 0x6e, 0x16, 0x21, 0x25, 0xed, 0xf1, 0x2b, 0xa8, 0xf8, 0x43, 0x40, 0x29, 0xaa,
	0x54, 0x82, 0x05, 0x63, 0xd9, 0x29, 0x1e, 0x14, 0x7b, 0x15, 0xb2, 0x9d, 0xd0, 0xaf, 0x23, 0x32,
	0xfe, 0x08, 0x9a, 0x29, 0xeb, 0x2d, 0x0b, 0x1c, 0xc1, 0xa8, 0xec, 0x6c, 0x1c, 0x14, 0x7b, 0x35,
	0x92, 0x62, 0xf4, 0x63, 0x3a, 0x7e, 0x06, 0x4d, 0x19, 0x3a, 0x8a, 0x39, 0x9e, 0x2d, 0xe8, 0x88,
	0x0a, 0x1a, 0xb8, 0xb4, 0x53, 0x3a, 0xb0, 0x7a, 0xd5, 0xbc, 0xa2, 0xd7, 0x11, 0x0b, 0x49, 0x38,
	0xb4, 0x2d, 0x08, 0x92, 0x2b, 0xd4, 0xee, 0x1f, 0xa1, 0xfd, 0x2a, 0x4e, 0xdc, 0x86, 0x52, 0x28,
	0xf8, 0xfd, 0xcf, 0x3a, 0x1b, 0x07, 0x56, 0xaf, 0x42, 0xa2, 0x0d, 0x7e, 0x08, 0x65, 0x2a, 0x05,
	0xb3, 0x5f, 0x4e, 0x94, 0xb9, 0xb1, 0x42, 0xb6, 0xf4, 0xfe, 0xf9, 0x44, 0x61, 0x0c, 0x1b, 0x2f,
	0x27, 0x6c, 0xd8, 0xd9, 0x3c, 0xb0, 0x7a, 0x25, 0x62, 0xd6, 0xdd, 0xbf, 0x14, 0xa0, 0x71, 0x19,
	0x3b, 0x8b, 0x50, 0x39, 0xf5, 0x14, 0xfe, 0x3c, 0xe7, 0x8d, 0x5b, 0x67, 0xdc, 0xb1, 0x8c, 0xde,
	0x0f, 0xd7, 0x0d, 0x1c, 0xbb, 0x2f, 0x73, 0x54, 0xdf, 0x19, 0xe3, 0x9f, 0x40, 0x3b, 0x7b, 0xba,
	0xe7, 0x28, 0xc6, 0x03, 0x79, 0xc7, 0x42, 0xe3, 0xa6, 0x32, 0x69, 0xa5, 0xaf, 0xcb, 0x8e, 0xf0,
	0x3e, 0x94, 0x87, 0x4c, 0x2a, 0x47, 0x1b, 0xa9, 0x78, 0x60, 0xf5, 0x2c, 0x92, 0xee, 0xf1, 0x57,
	0x00, 0x06, 0x86, 0xda, 0xbe, 0x13, 0x1a, 0x7b, 0x57, 0x8f, 0x3e, 0xc8, 0x54, 0x59, 0x56, 0xfd,
	0xd0, 0xc0, 0xd2, 0x0b, 0x27, 0x1c, 0x04, 0x4a, 0x2c, 0x48, 0x45, 0x24, 0xfb, 0xfd, 0xcf, 0xa1,
	0xb1, 0x7c, 0x88, 0x11, 0x14, 0x27, 0x74, 0x61, 0x5e, 0x57, 0x22, 0x7a, 0xa9, 0x0d, 0x3a, 0x73,
	0xbc, 0x29, 0x8d, 0x75, 0x8d, 0x36, 0x9f, 0x15, 0x7e, 0x6e, 0x75, 0xff, 0x6e, 0x41, 0xad, 0x3f,
	0x1d, 0x8d, 0xa8, 0xb8, 0x72, 0x84, 0xe3, 0x4b, 0xfc, 0x16, 0x54, 0x12, 0x15, 0xa3, 0x70, 0xb5,
	0x48, 0x46, 0xc0, 0x4f, 0xa0, 0xe1, 0x3b, 0x73, 0x7b, 0x48, 0x67, 0x2c, 0x7a, 0x65, 0xa7, 0x60,
	0x58, 0xea, 0xbe, 0x33, 0x3f, 0x4d, 0x89, 0x3a, 0xec, 0xa7, 0x01, 0xe3, 0x81, 0x2d, 0x8c, 0xf6,
	0xe6, 0xed, 0x65, 0x52, 0x35, 0xb4, 0xd4, 0x17, 0x8f, 0x34, 0xd2, 0x8c, 0x0a, 0xc5, 0x5c, 0x2a,
	0x6d, 0x16, 0xd8, 0xa3, 0xa9, 0xe7, 0xd9, 0x2e, 0x13, 0xae, 0x47, 0x8d, 0xe7, 0x4b, 0x64, 0xcf,
	0x77, 0xe6, 0xbf, 0x8b, 0x39, 0xce, 0x83, 0xaf, 0xa6, 0x9e, 0x77, 0x62, 0x8e, 0xbb, 0xff, 0xb0,
	0xa0, 0x7d, 0x46, 0xf9, 0x90, 0x2a, 0xe6, 0xfe, 0x1f, 0xaa, 0xff, 0x1e, 0xd4, 0x4e, 0x78, 0x30,
	0xa3, 0xf3, 0x58, 0xeb, 0x36, 0x94, 0x7c, 0x2a, 0xc6, 0xd4, 0xf8, 0xac, 0x4c, 0xa2, 0x4d, 0xf7,
	0x09, 0xd4, 0x22, 0xcf, 0xc6, 0x5c, 0x3b, 0xb0, 0x39, 0xa4, 0xf6, 0xa7, 0xcc, 0x37, 0x6c, 0x15,
	0x52, 0x1a, 0xd2, 0x4f, 0x99, 0xdf, 0xfd, 0x03, 0x60, 0xe2, 0x04, 0x43, 0xee, 0x5f, 0x71, 0x16,
	0x28, 0x19, 0x33, 0xff, 0x08, 0xda, 0xa1, 0xd9, 0xdb, 0x21, 0x15, 0xb6, 0x7c, 0x31, 0x75, 0x04,
	0xb5, 0x27, 0x7e, 0x6c, 0x93, 0x66, 0x74, 0x76, 0x45, 0xc5, 0xb5, 0x39, 0x79, 0xe6, 0xeb, 0x1c,
	0x92, 0x94, 0x0e, 0x4d, 0x88, 0x14, 0x89, 0x59, 0x77, 0x47, 0x80, 0xce, 0x68, 0x40, 0x85, 0xe3,
	0xb1, 0x3f, 0x25, 0x5a, 0xbc, 0x0b, 0xf5, 0x25, 0x1b, 0x1a, 0x65, 0x2c, 0x52, 0xcb, 0x9b, 0x10,
	0x7f, 0x0c, 0x58, 0x50, 0x9f, 0xcf, 0xa8, 0x3d, 0xa4, 0x63, 0x83, 0xa0, 0xa8, 0x8c, 0xa3, 0xaf,
	0x19, 0x9d, 0x9c, 0x66, 0x07, 0x5d, 0x0f, 0x76, 0xb3, 0x7b, 0xfa, 0x8b, 0x2f, 0x05, 0x75, 0xfe,
	0x87, 0xb7, 0x1d, 0x03, 0x3e, 0x0f, 0x14, 0x15, 0x92, 0xba, 0x5a, 0x3c, 0xbe, 0xe9, 0x09, 0x34,
	0x86, 0xcc, 0xa7, 0x81, 0xd4, 0x8e, 0xf7, 0x1d, 0x39, 0x89, 0x13, 0xa8, 0x9e, 0x52, 0x2f, 0x1c,
	0x39, 0xe9, 0xfe, 0xd5, 0x82, 0xda, 0xe5, 0x68, 0x24, 0xa9, 0x8a, 0xe5, 0xf2, 0x39, 0x6e, 0xad,
	0xe4, 0xf8, 0x27, 0x50, 0xb9, 0xe7, 0x2c, 0xc8, 0x97, 0xf3, 0x4e, 0x2e, 0xc5, 0x0d, 0xcc, 0xd7,
	0x9c, 0x05, 0xa6, 0x90, 0x97, 0xef, 0xe3, 0x15, 0x7e, 0x1b, 0xaa, 0xb7, 0x74, 0x46, 0x3d, 0x5b,
	0xe8, 0xf7, 0xc5, 0x95, 0x03, 0x0c, 0x89, 0x68, 0x8a, 0xb6, 0xca, 0xc8, 0x73, 0x94, 0xa2, 0x81,
	0x4d, 0x85, 0xe0, 0xc2, 0xc4, 0x9b, 0x45, 0x6a, 0x31, 0x71, 0xa0, 0x69, 0xdd, 0x23, 0xa8, 0x9c,
	0x4c, 0x55, 0xf6, 0x3a, 0x97, 0x07, 0x92, 0x0d, 0xa9, 0xb0, 0x15, 0x9f, 0xba, 0x77, 0x71, 0xa8,
	0xd5, 0x13, 0xea, 0x8d, 0x26, 0x76, 0xbf, 0x00, 0x38, 0xf1, 0x58, 0x18, 0x0b, 0x1d, 0x41, 0x99,
	0x06, 0x33, 0xea, 0xf1, 0x90, 0xc6, 0xb5, 0x72, 0x37, 0xd3, 0x7e, 0x10, 0x9f, 0x98, 0x42, 0x99,
	0xf2, 0x75, 0x0f, 0xa1, 0x7e, 0xaa, 0xcd, 0x35, 0x5a, 0xc4, 0x20, 0x8f, 0x01, 0xb4, 0x07, 0x3d,
	0x1a, 0x8c, 0xd5, 0x5d, 0x6c, 0xa1, 0x8a, 0xef, 0xcc, 0x7f, 0x6d, 0x08, 0xdd, 0xf7, 0xa1, 0x71,
	0xcd, 0xfc, 0xd0, 0xcb, 0x04, 0xda, 0x50, 0x1a, 0x71, 0xe1, 0xa6, 0xc9, 0x60, 0x36, 0xdd, 0x7f,
	0x56, 0x61, 0x3b, 0xab, 0x89, 0x2f, 0xa6, 0x54, 0x7e, 0xdf, 0x7a, 0xfe, 0x05, 0x34, 0x02, 0x2a,
	0x15, 0x1d, 0xda, 0x22, 0xc2, 0x33, 0x1e, 0x5a, 0x92, 0x5f, 0xb9, 0x90, 0xd4, 0x23, 0x81, 0xe4,
	0xfe, 0x01, 0x34, 0x3d, 0x3a, 0x52, 0xf6, 0x92, 0x12, 0xc5, 0xd7, 0x29, 0xb1, 0xad, 0x65, 0x72,
	0x44, 0x7c, 0x0e, 0x2d, 0x03, 0xb3, 0xa2, 0xcd, 0xc6, 0xeb, 0xb4, 0x31, 0x97, 0x7f, 0xb3, 0xa4,
	0xd1, 0x19, 0x60, 0xc1, 0xc6, 0x77, 0x2b, 0x2a, 0x95, 0x5e, 0xa7, 0x12, 0x32, 0x42, 0x79, 0x9d,
	0x9e, 0x41, 0x3b, 0x02, 0x5a, 0x51, 0x6a, 0xf3, 0x75, 0x4a, 0x45, 0xf7, 0x2f, 0x6b, 0xd5, 0x87,
	0x7a, 0x32, 0x36, 0x45, 0xa9, 0xb0, 0x65, 0x52, 0xe1, 0x71, 0x6e, 0x60, 0xa0, 0x62, 0xc6, 0x5c,
	0x9a, 0x80, 0x99, 0x7c, 0xa8, 0xf1, 0xdc, 0x0e, 0x13, 0xd8, 0x89, 0xaa, 0xb1, 0x5c, 0x99, 0x92,
	0xca, 0x6f, 0x34, 0x25, 0xb5, 0x62, 0xe1, 0xa5, 0x21, 0xe9, 0x5b, 0x78, 0x14, 0xdd, 0xa1, 0x53,
	0x7e, 0x7d, 0xac, 0xa9, 0xbc, 0xd1, 0x58, 0xf3, 0x30, 0x85, 0x58, 0x3d, 0xc6, 0xbf, 0x87, 0x4e,
	0x74, 0xed, 0x2b, 0xc0, 0xe1, 0x8d, 0xc0, 0x77, 0x23, 0xf9, 0x35, 0xe4, 0x63, 0xa8, 0xdf, 0x9a,
	0xb6, 0x67, 0x87, 0x26, 0x69, 0x3a, 0xd5, 0xd5, 0xf4, 0xcc, 0x77, 0x45, 0x52, 0xbb, 0xcd, 0xf7,
	0xc8, 0x63, 0xd0, 0x59, 0x3f, 0xa3, 0xf3, 0x44, 0xb8, 0xb6, 0x2a, 0x9c, 0x6f, 0x4e, 0xa4, 0xe6,
	0xe6, 0x5b, 0xd5, 0x31, 0xd4, 0xe3, 0xb1, 0x25, 0x16, 0xae, 0xaf, 0x0a, 0xe7, 0x7b, 0x16, 0xa9,
	0x89, 0x7c, 0x07, 0xfb, 0x06, 0xda, 0xc2, 0xb4, 0x2a, 0x3b, 0xe9, 0x4d, 0x11, 0x46, 0xc3, 0x60,
	0xbc, 0x95, 0xc3, 0x58, 0x6b, 0x68, 0x04, 0x8b, 0xf5, 0x26, 0x77, 0xa6, 0x47, 0xd7, 0xa4, 0x6f,
	0x24, 0x60, 0xdb, 0x06, 0x6c, 0x3f, 0x1f, 0x10, 0xcb, 0x2d, 0x4c, 0x8f, 0xb5, 0x2b, 0x4d, 0xed,
	0x02, 0x5a, 0x2c, 0xd7, 0x12, 0x12, 0x28, 0xb4, 0xaa, 0xd7, 0x7a, 0xdf, 0x20, 0x98, 0xad, 0xf7,
	0x92, 0x63, 0xa8, 0x73, 0x53, 0xdc, 0x13, 0xa0, 0xe6, 0xaa, 0x91, 0xf2, 0x2d, 0x84, 0xd4, 0x78,
	0xbe, 0xa1, 0x1c, 0x01, 0xb8, 0xd3, 0x54, 0x12, 0x1b, 0xc9, 0x56, 0xce, 0x37, 0x49, 0x4d, 0x27,
	0x15, 0x37, 0x2d, 0xef, 0x9f, 0x40, 0xd5, 0xf5, 0x58, 0x98, 0x08, 0xb5, 0x8c, 0x50, 0x3b, 0x27,
	0x94, 0x16, 0x75, 0x02, 0x6e, 0x56, 0xe0, 0x7f, 0x09, 0x8d, 0x61, 0x54, 0xac, 0x13, 0xc9, 0xb6,
	0x91, 0xdc, 0xcb, 0x24, 0x97, 0x8a, 0x39, 0xa9, 0x0f, 0x97, 0x6a, 0xfb, 0x97, 0xb0, 0x2d, 0xe3,
	0xe2, 0x9d, 0x00, 0xec, 0x18, 0x80, 0x5c, 0x97, 0x5b, 0xae, 0xee, 0xa4, 0x21, 0x97, 0xf6, 0xdd,
	0x6f, 0xa1, 0x96, 0xef, 0x24, 0x7a, 0x0c, 0x99, 0xfb, 0x2c, 0xe9, 0xf3, 0x66, 0xad, 0x69, 0x0b,
	0x4d, 0x2b, 0x44, 0xb4, 0x45, 0x4c, 0x9b, 0xfb, 0xce, 0x3c, 0x6e, 0x8e, 0x66, 0x1d, 0xf1, 0x39,
	0xf3, 0xb8, 0x1b, 0x9a, 0xf5, 0xd3, 0xdf, 0x98, 0x41, 0x71, 0xfd, 0x03, 0xa9, 0x0a, 0x5b, 0xd3,
	0x60, 0x12, 0xf0, 0x97, 0x01, 0x7a, 0x80, 0xb7, 0xa0, 0xf8, 0x72, 0x72, 0x8b, 0xac, 0x68, 0xa1,
	0x50, 0x41, 0x1f, 0x8f, 0x29, 0xbf, 0x97, 0x3c, 0x40, 0x45, 0x5c, 0x87, 0x8a, 0xfe, 0xd2, 0x90,
	0x77, 0x4e, 0x48, 0xd1, 0xc6, 0xd3, 0x7f, 0x95, 0xa0, 0xf5, 0x8a, 0x82, 0xa5, 0x65, 0xae, 0x04,
	0xbf, 0xa7, 0xae, 0x42, 0x0f, 0x30, 0x82, 0xda, 0x60, 0x1e, 0x72, 0xa1, 0x6e, 0xf8, 0xd7, 0x1a,
	0xc5, 0xc2, 0x18, 0x1a, 0xe7, 0xbe, 0xa6, 0x7c, 0x25, 0xb8, 0x6f, 0x68, 0x05, 0xfc, 0x18, 0x1e,
	0x46, 0xb4, 0x0b, 0x27, 0x4c, 0xd4, 0x4c, 0x8f, 0x8b, 0x78, 0x07, 0x9a, 0x09, 0xc8, 0xe0, 0x9a,
	0x9c, 0x5f, 0x47, 0x0a, 0xe0, 0x3d, 0x68, 0x65, 0x48, 0xd9, 0x41, 0x09, 0x57, 0xa0, 0xf4, 0x5b,
	0x3d, 0xa4, 0xa2, 0x4d, 0xdc, 0x00, 0x38, 0x65, 0xa3, 0xb8, 0x5e, 0xa0, 0x2d, 0xbc, 0x0d, 0xd5,
	0x2b, 0xc1, 0xe7, 0xcc, 0x67, 0x6a, 0x71, 0x74, 0x8a, 0xca, 0x18, 0x60, 0x33, 0xca, 0x54, 0x54,
	0xd1, 0xeb, 0xc1, 0x8b, 0xa9, 0xe3, 0x49, 0x04, 0xb8, 0x06, 0xe5, 0x53, 0x26, 0xf5, 0x2c, 0xa2,
	0x50, 0x55, 0xc3, 0xa4, 0x31, 0x2f, 0x51, 0x4d, 0x73, 0x3e, 0x67, 0xea, 0x8e, 0x05, 0xa8, 0xae,
	0x39, 0x4f, 0x78, 0xa0, 0x1c, 0x16, 0x48, 0xd4, 0xd0, 0xaf, 0x3f, 0x11, 0x5c, 0x4a, 0x2a, 0xd1,
	0xb6, 0xde, 0x98, 0x81, 0x82, 0x4a, 0x84, 0x34, 0xdf, 0xe5, 0x8c, 0x0a, 0xcf, 0x09, 0x25, 0x6a,
	0x6a, 0x84, 0xa8, 0x36, 0x21, 0x1c, 0xdf, 0x65, 0x66, 0x25, 0xd4, 0xd2, 0x26, 0xcb, 0xe7, 0x17,
	0x6a, 0xe3, 0x32, 0x6c, 0xe8, 0xc8, 0x45, 0x3b, 0xda, 0x31, 0x27, 0x53, 0x85, 0x76, 0x71, 0x0b,
	0xb6, 0xe3, 0x90, 0xec, 0x2f, 0xa2, 0x11, 0x02, 0xed, 0x69, 0xd3, 0x9a, 0xaf, 0x01, 0x99, 0x7c,
	0x0d, 0xa0, 0x7d, 0xfc, 0x08, 0xf6, 0x92, 0x2f, 0x84, 0x55, 0x81, 0x47, 0xa9, 0x80, 0x62, 0x6e,
	0x4c, 0x7b, 0xac, 0x95, 0x49, 0x62, 0x15, 0xbd, 0xad, 0xed, 0x95, 0xec, 0x2e, 0xcf, 0x4e, 0xd0,
	0x81, 0xd6, 0x3b, 0x4a, 0x5a, 0xf4, 0x8e, 0xb6, 0x4a, 0x56, 0x54, 0x50, 0x17, 0xb7, 0xf3, 0x73,
	0x72, 0x34, 0xbf, 0xa2, 0x77, 0x35, 0x44, 0xe2, 0xbd, 0xe7, 0x93, 0x5b, 0xf4, 0x1e, 0x6e, 0x42,
	0x3d, 0xf3, 0x9b, 0x26, 0x3d, 0x59, 0xe6, 0x51, 0xe8, 0xfd, 0x55, 0x1e, 0x85, 0x3e, 0xd0, 0x51,
	0x90, 0x91, 0xce, 0x68, 0x14, 0x4f, 0x3d, 0x6d, 0x89, 0x44, 0x34, 0x21, 0x7e, 0xa8, 0x43, 0xe3,
	0x7a, 0xe1, 0xeb, 0x38, 0x62, 0x6e, 0xce, 0xff, 0x4f, 0xb5, 0xca, 0x51, 0x55, 0xff, 0xd5, 0xd4,
	0xf3, 0xd0, 0x47, 0xfa, 0xb5, 0x7d, 0x3e, 0x0d, 0x86, 0x8e, 0x58, 0xa0, 0x1f, 0x6a, 0xd3, 0xe7,
	0x4b, 0x2e, 0xfa, 0xd8, 0xa0, 0x07, 0xae, 0xc7, 0x25, 0x0b, 0xc6, 0xd1, 0x57, 0x0b, 0x3a, 0x7c,
	0xfa, 0x0b, 0x68, 0x2c, 0x0f, 0xad, 0x3a, 0xe2, 0x88, 0x86, 0x41, 0x0f, 0xf4, 0xb2, 0xaf, 0x47,
	0x54, 0x64, 0xe9, 0xe5, 0x05, 0x53, 0x54, 0xa0, 0x82, 0x36, 0x5b, 0xf4, 0x89, 0x81, 0x8a, 0x47,
	0xff, 0xb6, 0xa0, 0x99, 0x44, 0x79, 0x92, 0x39, 0x12, 0x9f, 0x03, 0x1a, 0xcc, 0xa9, 0x3b, 0x55,
	0x71, 0x36, 0xe9, 0x89, 0xfe, 0xbb, 0x07, 0x8c, 0xfd, 0xce, 0x77, 0x7d, 0x23, 0x77, 0x1f, 0xe0,
	0x0b, 0x40, 0xd7, 0x4a, 0x50, 0xc7, 0x4f, 0x91, 0xe4, 0x7f, 0x09, 0xd5, 0xb3, 0x7e, 0x6c, 0xe1,
	0x4b, 0xc0, 0xab, 0x70, 0x83, 0xf9, 0xf7, 0x00, 0xec, 0x7f, 0x06, 0x1d, 0x97, 0xfb, 0x87, 0x34,
	0xf4, 0x0e, 0x65, 0x54, 0x40, 0x52, 0x81, 0xfe, 0xee, 0x9a, 0x65, 0xae, 0x04, 0x57, 0xfc, 0xca,
	0xfa, 0x73, 0xa1, 0x48, 0x6e, 0xce, 0x6e, 0x37, 0xcd, 0xff, 0xa6, 0x9f, 0xfe, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x0f, 0xdc, 0xba, 0xf2, 0x8b, 0x12, 0x00, 0x00,
}
